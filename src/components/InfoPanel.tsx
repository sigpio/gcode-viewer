import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import type { Bounds3D, ParsedGCode } from '../utils/readGCode';

type InfoPanelFile = Pick<ParsedGCode, 'layers' | 'estimatedHeight' | 'bounds' | 'metadata' | 'totalCommands'> & {
  readonly name: string;
  readonly color: string;
};

type InfoPanelProps = {
  readonly files: InfoPanelFile[];
  readonly isOpen: boolean;
  readonly currentLayer: number;
  readonly maxLayer: number;
  readonly onClose?: () => void;
  readonly showTravelMoves: boolean;
  readonly onTravelMovesChange: (visible: boolean) => void;
};

const CORE_METADATA_KEYS = [
  'generated by',
  'total layer number',
  'filament_density',
  'filament_diameter',
  'filament diameter',
  'max_z_height',
  'exclude_object',
  'model_instances',
  'source_info'
];

const formatLabel = (key: string): string => {
  const cleaned = key.replace(/[_-]+/g, ' ');
  return cleaned.replace(/\b\w/g, (char) => char.toUpperCase());
};

const tryParseJson = (value: string): string | null => {
  const trimmed = value.trim();
  if (!trimmed.startsWith('{') && !trimmed.startsWith('[')) {
    return null;
  }
  try {
    const parsed = JSON.parse(trimmed);
    return JSON.stringify(parsed, null, 2);
  } catch {
    return null;
  }
};

const formatBounds = (bounds: Bounds3D | null): string | null => {
  if (!bounds) {
    return null;
  }
  const { minX, maxX, minY, maxY, minZ, maxZ } = bounds;
  return `X ${minX.toFixed(2)} -> ${maxX.toFixed(2)} | Y ${minY.toFixed(2)} -> ${maxY.toFixed(
    2
  )} | Z ${minZ.toFixed(2)} -> ${maxZ.toFixed(2)}`;
};

const InfoPanel = ({
  files,
  isOpen,
  currentLayer,
  maxLayer,
  onClose,
  showTravelMoves,
  onTravelMovesChange
}: InfoPanelProps) => {
  const { t } = useTranslation();

  const payload = useMemo(() => {
    return files.map((file) => {
      const layerCount =
        file.layers.length > 0 ? file.layers[file.layers.length - 1]!.index + 1 : 0;
      const metadataEntries = Object.entries(file.metadata);
      const boundsSummary = formatBounds(file.bounds);

      const preferredMetrics = CORE_METADATA_KEYS.filter((key) =>
        metadataEntries.some(([metadataKey]) => metadataKey === key)
      );

      const additionalEntries = metadataEntries.filter(
        ([key]) => !preferredMetrics.includes(key)
      );

      return {
        ...file,
        layerCount,
        preferredMetrics,
        additionalEntries,
        boundsSummary
      };
    });
  }, [files]);

  if (!isOpen) {
    return null;
  }

  return (
    <aside
      aria-label={t('infoPanel.title')}
      className="fixed inset-0 z-40 flex h-screen w-screen flex-col overflow-hidden border-t border-slate-800 bg-slate-950 text-slate-200 transition-transform duration-300 lg:static lg:h-full lg:w-80 lg:flex-shrink-0 lg:border-t-0 lg:border-l lg:border-slate-800 lg:bg-slate-900/80"
    >
      <header className="flex flex-col gap-3 border-b border-slate-800 px-4 py-3">
        <div className="flex items-start justify-between gap-2">
          <div>
            <p className="text-sm font-semibold text-white">{t('infoPanel.title')}</p>
            <p className="text-xs text-slate-400">
              {t('infoPanel.currentLayer', { current: currentLayer, max: maxLayer })}
            </p>
          </div>
          {onClose && (
            <button
              type="button"
              onClick={onClose}
              className="rounded-md border border-slate-700 px-2 py-1 text-xs text-slate-300 hover:text-white lg:hidden"
            >
              {t('infoPanel.close')}
            </button>
          )}
        </div>
        <label className="flex items-center gap-2 text-xs text-slate-300">
          <input
            type="checkbox"
            className="h-4 w-4 cursor-pointer rounded border-slate-600 bg-slate-900 text-brand-light focus:outline-none focus:ring-1 focus:ring-brand-light"
            checked={showTravelMoves}
            onChange={(event) => onTravelMovesChange(event.target.checked)}
          />
          <span>{t('infoPanel.showTravelMoves')}</span>
        </label>
      </header>
      <div className="scrollbar-brand flex-1 overflow-y-auto px-4 py-4">
        {payload.length === 0 ? (
          <p className="text-sm text-slate-500">{t('infoPanel.empty')}</p>
        ) : (
          <div className="space-y-6">
            {payload.map((file) => (
              <section
                key={file.name}
                className="scrollbar-brand flex max-h-[74vh] flex-col overflow-y-auto rounded-lg border border-slate-800 bg-slate-900/70 p-4"
              >
                <div className="flex items-center justify-between gap-2">
                  <p className="truncate text-sm font-semibold text-white">{file.name}</p>
                  <span
                    className="h-3 w-3 flex-shrink-0 rounded-full"
                    style={{ backgroundColor: file.color }}
                    aria-hidden
                  />
                </div>
                <dl className="mt-3 space-y-2 text-xs">
                  <div className="flex flex-col gap-1">
                    <dt className="uppercase tracking-wide text-slate-500">
                      {t('infoPanel.totalLayers')}
                    </dt>
                    <dd className="font-medium text-slate-200">{file.layerCount}</dd>
                  </div>
                  <div className="flex flex-col gap-1">
                    <dt className="uppercase tracking-wide text-slate-500">
                      {t('infoPanel.totalCommands')}
                    </dt>
                    <dd className="font-medium text-slate-200">{file.totalCommands}</dd>
                  </div>
                  {file.estimatedHeight !== null && (
                    <div className="flex flex-col gap-1">
                      <dt className="uppercase tracking-wide text-slate-500">
                        {t('infoPanel.estimatedHeight')}
                      </dt>
                      <dd className="font-medium text-slate-200">
                        {file.estimatedHeight.toFixed(2)} mm
                      </dd>
                    </div>
                  )}
                  {file.boundsSummary && (
                    <div className="flex flex-col gap-1">
                      <dt className="uppercase tracking-wide text-slate-500">
                        {t('infoPanel.boundingBox')}
                      </dt>
                      <dd className="font-medium text-slate-200">{file.boundsSummary}</dd>
                    </div>
                  )}
                  {file.preferredMetrics.map((metricKey) => {
                    const rawValue = file.metadata[metricKey];
                    const formattedJson = tryParseJson(rawValue);
                    return (
                      <div key={metricKey} className="flex flex-col gap-1">
                        <dt className="uppercase tracking-wide text-slate-500">
                          {formatLabel(metricKey)}
                        </dt>
                        <dd className="font-medium text-slate-200">
                          {formattedJson ? (
                            <pre className="max-h-40 overflow-y-auto whitespace-pre-wrap rounded-md border border-slate-800 bg-slate-950/80 p-2 font-mono text-[11px] text-slate-300">
                              {formattedJson}
                            </pre>
                          ) : (
                            rawValue
                          )}
                        </dd>
                      </div>
                    );
                  })}
                  {file.additionalEntries.length > 0 && (
                    <div className="flex flex-col gap-1">
                      <dt className="uppercase tracking-wide text-slate-500">
                        {t('infoPanel.additionalFields')}
                      </dt>
                      <dd className="space-y-1">
                        {file.additionalEntries.map(([key, value]) => (
                          <div key={key} className="rounded-md border border-slate-800 bg-slate-950/70 p-2">
                            <p className="font-semibold text-slate-300">{formatLabel(key)}</p>
                            <p className="text-slate-200">{value}</p>
                          </div>
                        ))}
                      </dd>
                    </div>
                  )}
                </dl>
              </section>
            ))}
          </div>
        )}
      </div>
    </aside>
  );
};

export default InfoPanel;
